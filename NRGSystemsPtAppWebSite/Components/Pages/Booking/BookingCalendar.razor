@page "/bookingCalendar"

@using MudBlazor 
@using NRGSystemsPtAppWebSite.Handlers
@using NRGSystemsPtAppWebSite.Models
@using NRGSystemsPtAppWebSite.Services
@using BlazorBootstrap

@inject CalendarFunctionServices apiCalendar
@inject SweetAlertService sweetAlertService

@rendermode InteractiveServer

<div>
    <div>
        <label for="Client" style="color:#1e90ff; font-family:Cooper; font-size:larger; align-content:center; width:max-content">CLIENT</label>
        <input for="Client" style="color:#1e90ff; font-family:Cooper; font-size:larger" type="text" @bind="ClientsName" />
    </div>
    <br />
    <div>
        <label for="Calendar" style="color:#1e90ff; font-family:Cooper; font-size:larger">SELECT THE DAY</label>
        <input for="Calendar" style="color:#1e90ff; font-family:Cooper; font-size:larger" type="date" @onchange="UpdateDayView" />
        @* <input for="Calendar" style="color:#1e90ff; font-family:Cooper; font-size:larger" type="date" @onchange="UpdateDayView" @bind="BookingDate" /> *@
    </div>
    <br />
    <div>
        <label style="color:#1e90ff; font-family:Cooper; font-size:larger">SELECT THE START TIME</label>
        <select class="selection-box" style="color:#1e90ff; font-family:Cooper; font-size:larger"
                @onchange="StartTimeSet">
            <option style="color:#1e90ff; font-family:Cooper; font-size:larger">Start time</option>
            @foreach (var time in StartTimes)
            {
                <option value="@time"
                        style="color:#1e90ff; font-family:Cooper; font-size:larger"> @time</option>
            }
        </select>
    </div>
    <br />
    <div>
        <label style="color:#1e90ff; font-family:Cooper; font-size:larger">SELECT THE DURATION</label>
        <select class="selection-box" style="color:#1e90ff; font-family:Cooper; font-size:larger"
                @onchange="UpdateDuration">
            <option style="color:#1e90ff; font-family:Cooper; font-size:larger">Select Duration</option>
            @foreach (var goal in DurationList)
            {
                <option value="@goal"
                        style="color:#1e90ff; font-family:Cooper; font-size:larger"> @goal</option>
            }
        </select>
    </div>
    <br />

    <div>
        <GoalSetter GoalSelectionMade="UpdateGoal"></GoalSetter>
    </div>
    <br />
    <div>
@*         <button class="btn btn-danger" style="color:#1e90ff; font-family:Cooper; font-size:larger" 
                @onclick="@(async () => await sweetAlertService.FireAsync("Condemnation"))">
            COMMIT
        </button> *@
        <button class="btn btn-danger" style="color:#1e90ff; font-family:Cooper; font-size:larger" @onclick="CommitAppointment"> COMMIT </button>
    </div>
    <br />
    <div>
        <DayTemplate NewBookings ="_newBookings" />
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext httpContext { get; set; }
    [Parameter]
    public static string ClientsName { get; set; } = "";
    public static int clientsID = 0;

    [Parameter]
    public string _date { get; set; } = DateTime.UtcNow.Date.ToString("dd/MM/yyyy");

    CalendarEvents booking = new CalendarEvents();
    [Parameter]
    public DateTime BookingDate { get; set; } = DateTime.UtcNow;
    [Parameter]
    public static string GoalSelected { get; set; }
    [Parameter]
    public string[] DurationList { get; set; } = new[] { "30 mins", "45 mins", "1 hour" };
    [Parameter]
    public List<string> StartTimes { get; set; } = [];

    [Parameter]
    public static List<CalendarEvents> _newBookings { get; set; } = new();
    [Parameter]
    public static List<CalendarEvents> _validBookings { get; set; } = new();
    [Parameter]
    public static List<CalendarEvents> dayBookings { get; set; } = new();

    [Parameter]
    public static string state { get; set; } = "The times you have selected clash with a previous booking. Please change your start/end times";

    private TimeSpan? _timeStart = new TimeSpan(08, 00, 00);
    private TimeSpan? _timeEnd = new TimeSpan(09, 00, 00);

    DayTemplate dayTemplate = new();

    protected override async Task OnInitializedAsync()
    {
        if (httpContext is not null)
        {
            foreach (var claim in httpContext.User.Claims)
            {
                if (claim.Type.Contains("givenname"))
                {
                    ClientsName = claim.Value;
                }
                if (claim.Type.Contains("sid"))
                {
                    clientsID = int.Parse(claim.Value);
                }
            }
        }
        FillStartTimes();
        _= UpdateCalendarView();
    }

    private async Task UpdateCalendarView()
    {
        _newBookings = await apiCalendar.GetAllCalendarEvent();
        _validBookings = dayTemplate.CheckNewBookings(_newBookings);
    }

    private async Task DateSelected() // EventArgs e)
    {
        dayBookings = new();
        foreach (var booking in _newBookings)
        {
            if (booking.BookingDate == _date)
            {
                dayBookings.Add(booking);
            }
        }
    }

    void StartTimeSet(ChangeEventArgs e)
    {
        booking.StartTime = e.Value.ToString();
    }

    void UpdateGoal(string goal)
    {
        booking.Goal = goal;
    }

    async Task<bool> CheckBooking()
    {
        if ((booking.Goal is null) || (booking.StartTime is null) ||
            (booking.Duration is null) || (booking.BookingDate is null))
        {
            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Width = "300",
                Position = "center",
                Title = "You have missed some information",
                Text = $"Check the values have been set",
                Icon = SweetAlertIcon.Warning
            });
            return false;
        }
        return true;
    }

    private async Task CommitAppointment(MouseEventArgs e)
    {
        booking.BookingDate = BookingDate.Date.ToString();
        booking.DateBookingMade = DateTime.Now.Date.ToString();

        bool filledIn = CheckBooking().Result;
        if (!filledIn)
            return;


        booking.IsEmpty = false;
        var dateSplitter = DateTime.UtcNow.ToString().Split(" ");
        booking.DateBookingMade = dateSplitter[0]; // DateTime.UtcNow.ToString();
                                                   // booking.BookingDate = _date;
                                                   // booking.StartTime = _timeStart.ToString();
                                                   // booking.Duration = _timeEnd.ToString();
        booking.BookingClientId = clientsID;

        if (CheckBooking(booking))
        {
            // var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                {
                    Width = "400",
                    Title = "BOOKINGS",
                    Text = $"You are trying to make an appointment for "  +
                           $"{booking.BookingDate} at {booking.StartTime} to {booking.Duration}",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes, I want to provisionally make this appointment",
                    CancelButtonText = "No, I need to check my diary.",
                });

            var confirm = !string.IsNullOrEmpty(result.Value);
            if (confirm)
            {
                BookingCalendar._newBookings.Add(booking);
                var x = await apiCalendar.CreateACalendarEvent(booking);
             }
        }

        BookingCalendar._newBookings.Add(booking);
        _= UpdateCalendarView();
    }

    bool CheckBooking(CalendarEvents newBooking)
    {
        // NEED TO DO A CHECK TO SEE IF THERE IS A CLASH ON THE TIMES OF BOOKINGS.
        // LOOKING INTO TimeDate STRUCTURE AND USAGE.........
        foreach(var booking in dayBookings)
        {
            // does the new booking start before the already booked sessions or after the booked one finishes
            if(DateTime.Parse(newBooking.StartTime) < DateTime.Parse(booking.StartTime))
            {
                if(DateTime.Parse(newBooking.Duration)  < DateTime.Parse(booking.StartTime))
                { 
                    if(DateTime.Parse(newBooking.Duration) > DateTime.Parse(booking.StartTime)) 
                    {
                        if(DateTime.Parse(newBooking.Duration) > DateTime.Parse(booking.Duration))                
                        {
                        }
                        else
                        {
                            return false;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        return true;
    }

    void UpdateDuration(ChangeEventArgs e) // string duration)
    {
        booking.Duration = e.Value.ToString();
        var eValString = e.Value.ToString();
        if(eValString == "1 hour")
            booking.Duration = "01:00:00";
        if (eValString == "45 mins")
            booking.Duration = "00:45:00";
        if (eValString == "30 mins")
            booking.Duration = "00:30:00";
    }

    private void FillStartTimes()
    {
        StartTimes = [];
        string startTime = "06:00";

        for (int i = 6; i < 21; i++)
        {
            for (int j = 0; j < 60; j += 15)
            {
                string ii = j.ToString();
                if (j == 0)
                {
                    ii = "00";
                }

                if (i < 10)
                {
                    StartTimes.Add($"{startTime}");
                    startTime = $"0{i}:" + ii;
                }
                else
                {
                    StartTimes.Add($"{startTime}");
                    startTime = $"{i}:" + ii;
                }
            }
        }
    }
    private async Task UpdateDayView(ChangeEventArgs e)
    {
        // _ = UpdateCalendarView();
        BookingDate = DateTime.Parse(e.Value.ToString());

        dayTemplate.GetTodaysBookings(DateTime.Parse(e.Value.ToString()));
    }
}
